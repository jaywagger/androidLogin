package tcpserver;
import java.awt.EventQueue;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;


public class ServerView extends JFrame {
	 JPanel contentPane;
	 JTextArea taclientlist;
	 JButton btnchangeport;
	 JButton btnstartServer;
	 JButton btnstop;
	 OutputStream os;//시리얼통신에서 아두이노로 데이터를 내보내기 위한 스트림
	 InputStream is;
	 InputStreamReader ir;
	 BufferedReader br;//클라이언트의 메시지를 읽는 스트림
	 PrintWriter pw; 	
	 StringTokenizer st;
	 ServerSocket server;
	 Socket client;
	 Socket infosocket;
	 String info; //안드로이드 & 차유저 구분 프로토콜
	 //1. ===========클라이언트들의 정보를 저장할 변수 선언==================
	 Vector<User> userlist = new Vector<User>();
	 Vector<User> carlist = new Vector<User>();
	 //=========================================================
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ServerView frame = new ServerView();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		new ServerView().connection();
	}
	/**
	 * Create the frame.
	 */
	public ServerView() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 673, 513);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		taclientlist = new JTextArea();
		taclientlist.setBounds(12, 50, 472, 415);
		taclientlist.setFont(new Font("HY견고딕", Font.BOLD, 16));
		
		
		JScrollPane scroll = new JScrollPane(taclientlist);
		scroll.setBounds(12, 50, 472, 415);
		contentPane.add(scroll);
		
		
		JLabel label = new JLabel("\uC811\uC18D\uC790:");
		label.setFont(new Font("HY견고딕", Font.BOLD, 14));
		label.setBounds(12, 10, 120, 35);
		contentPane.add(label);
		
		btnchangeport = new JButton("\uD3EC\uD2B8\uBCC0\uACBD");
		btnchangeport.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnchangeport.setBounds(516, 50, 129, 35);
		contentPane.add(btnchangeport);
		
		btnstartServer = new JButton("\uC11C\uBC84\uC2DC\uC791");
		btnstartServer.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnstartServer.setBounds(516, 95, 129, 35);
		contentPane.add(btnstartServer);
		
		btnstop = new JButton("\uC11C\uBC84\uC911\uC9C0");
		btnstop.setFont(new Font("HY견고딕", Font.BOLD, 14));
		btnstop.setBounds(516, 140, 129, 35);
		contentPane.add(btnstop);
		btnstartServer.addActionListener(new ServerListener(this));
		btnstop.addActionListener(new ServerListener(this));
	}
	public void serverStart(int port) {
		try {
			server = new ServerSocket(port);
			taclientlist.append("사용자 접속 대기중\n");
			if(server!=null) {
				//클라이언트의 접속을 기다리는 처리
				connection();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void connection() {
		ioWork();
		Thread filterthread = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					try {
						String msg = br.readLine();
						filteringMsg(msg);
					} catch (IOException e) {
						try {
							is.close();
							ir.close();
							br.close();
							os.close();
							pw.close();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
					
					}
				}
			}
		}); 
		
		Thread thread = new Thread(new Runnable() {
			@Override
			public void run() {
				while(true) {
					try {
						client = server.accept();
						String ip = client.getInetAddress().getHostAddress();
						//taclientlist.append(ip+"========안드로이드 사용자 접속!!!\n");
						User user = new User(client,userlist,carlist,ServerView.this,ip);
						user.start();					
//						else if(info.equals("car")) {
//							User user = new User(client,userlist,carlist,info);
//							user.start(); 
//						}
						//5. 새로운 클라이언트가 접속하면 기존 사용자의 정보를 넘길 수 있도록 수정======
						//User user = new User(client, ChatServerView.this,userlist);
						//user.start();
					
					} catch (IOException e) {
						e.printStackTrace();
					}
				}//end while
				
			}
		});
		thread.start();
	}
	public void ioWork() { //처음 접속했을 때 한 번 실행되는 메소드
		try {
			is = client.getInputStream();
			ir = new InputStreamReader(is);
			br = new BufferedReader(ir);
			//os = client.getOutputStream();
			//pw = new PrintWriter(os,true);
			info = br.readLine();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
//	public void filteringMsg(String msg) {
//			System.out.println("서버가 받은 클라이언트의 메시지:"+msg);
//			st = new StringTokenizer(msg,"/");
//			info = st.nextToken();
//			if(info.equals("android")) {
//				String protocol= st.nextToken();
//				String message = st.nextToken();
//				String userid = st.nextToken();
//				System.out.println("유저프로토콜구분==>"+info+"메세지==>"+message+"유저아이디"+userid);
//			}else if(info.equals("car")) {
//				String protocol= st.nextToken();
//				String message = st.nextToken();
//				String userid = st.nextToken();
//				System.out.println("유저프로토콜구분==>"+info+"메세지==>"+message+"유저아이디"+userid);
//			}
//	}
}
